<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guides on protobuf-rpc-pro</title>
    <link>http://pjklauser.github.io/protobuf-rpc-pro/guides/</link>
    <description>Recent content in Guides on protobuf-rpc-pro</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the Apache License 2.0</copyright>
    <lastBuildDate>Sun, 18 Sep 2016 14:57:52 +0200</lastBuildDate>
    
	<atom:link href="http://pjklauser.github.io/protobuf-rpc-pro/guides/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started</title>
      <link>http://pjklauser.github.io/protobuf-rpc-pro/guides/gettingstarted/</link>
      <pubDate>Sun, 18 Sep 2016 14:57:52 +0200</pubDate>
      
      <guid>http://pjklauser.github.io/protobuf-rpc-pro/guides/gettingstarted/</guid>
      <description>The example source package contains several runnable examples.
The examples use a simple PingPong service where a client can call &amp;ldquo;ping&amp;rdquo; on a server.
Client Code Firstly we declare who the client is and who the server is that we&amp;rsquo;re going to connect to. Note that the client does not actually bind to port 1234, it is just used as a &amp;ldquo;name&amp;rdquo;.
 PeerInfo client = new PeerInfo(&amp;quot;clientHostname&amp;quot;, 1234); PeerInfo server = new PeerInfo(&amp;quot;serverHostname&amp;quot;, 8080);  The main client class to start with is a DuplexTcpClientPipelineFactory which works together with Netty Bootsrap to construct client channels.</description>
    </item>
    
    <item>
      <title>Performance Tips</title>
      <link>http://pjklauser.github.io/protobuf-rpc-pro/guides/performancetips/</link>
      <pubDate>Sun, 18 Sep 2016 14:57:52 +0200</pubDate>
      
      <guid>http://pjklauser.github.io/protobuf-rpc-pro/guides/performancetips/</guid>
      <description>Netty Since protobuf-rpc-pro uses Netty to provide the io over TCP, optimization of Netty will help increase performance. Here is a good article giving ideas how to squeeze the most out of Netty. http://gleamynode.net/articles/2232/
JVM options -server -Xms2048m -Xmx2048m -XX:+UseParallelGC -XX:+AggressiveOpts -XX:+UseFastAccessorMethods
Using the JVM options described increased throughput by 15% under certain conditions*.
protobuf-rpc-pro configuration If you do not call a client RPC method from within the processing of a server side RPC call then configure your server side DuplexTcpServerBootstrap with a SameThreadExecutor.</description>
    </item>
    
    <item>
      <title>SSL Guide</title>
      <link>http://pjklauser.github.io/protobuf-rpc-pro/guides/sslguide/</link>
      <pubDate>Sun, 18 Sep 2016 14:57:52 +0200</pubDate>
      
      <guid>http://pjklauser.github.io/protobuf-rpc-pro/guides/sslguide/</guid>
      <description>This guide explains how to setup keystores and certificate truststores in order to secure TCP communications between RPC client and server. The code required to secure communications is trivial and shown below for both client and server. The effort or price for the additional security is the effort and maintenance involved in managing the &amp;ldquo;trusted material&amp;rdquo; ie. keys, certificates and keystores.
Client Code The client must initialize a RpcSSLContext and register this with the bootstrap prior to peering with the server.</description>
    </item>
    
    <item>
      <title>SpringFramework</title>
      <link>http://pjklauser.github.io/protobuf-rpc-pro/guides/springconfigguide/</link>
      <pubDate>Sun, 18 Sep 2016 14:57:52 +0200</pubDate>
      
      <guid>http://pjklauser.github.io/protobuf-rpc-pro/guides/springconfigguide/</guid>
      <description>Thanks to Dieter Mayrhofer for contributing this example code. It shows one way to configure a server side implementation using spring. The code and runner is checked into the ( demo package ). The example starts a DefaultPingPongServerImpl service which is provided as standalone example.
Dependency on Spring Introduce the following maven dependencies to spring.
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.5.RELEASE&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.5.RELEASE&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt;  Server Spring Component The main spring component uses PostConstruct and PreDestroy annotations to startup and tear down the component cleanly.</description>
    </item>
    
  </channel>
</rss>