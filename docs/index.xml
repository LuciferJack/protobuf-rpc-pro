<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>protobuf-rpc-pro</title>
    <link>http://pjklauser.github.io/protobuf-rpc-pro/</link>
    <description>Recent content on protobuf-rpc-pro</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the Apache License 2.0</copyright>
    <lastBuildDate>Sun, 18 Sep 2016 14:57:52 +0200</lastBuildDate>
    
	<atom:link href="http://pjklauser.github.io/protobuf-rpc-pro/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Architecture</title>
      <link>http://pjklauser.github.io/protobuf-rpc-pro/internals/componentarchitecture/</link>
      <pubDate>Sun, 18 Sep 2016 14:57:52 +0200</pubDate>
      
      <guid>http://pjklauser.github.io/protobuf-rpc-pro/internals/componentarchitecture/</guid>
      <description>The protobuf-rpc-pro libraries primary function is to enable fully duplex RPC calls multiplexed over a single TCP/IP socket connection. Due to this duplex nature, the component architecture is almost symetric on client and server sides. The picture below shows the libraries internal architecture.
 DuplexTcpClient/ServerBootstraps - These are the factories for client and server connections.  PeerInfo - The identity of the client and server respectively, provided by hostname and port which is bound.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://pjklauser.github.io/protobuf-rpc-pro/guides/gettingstarted/</link>
      <pubDate>Sun, 18 Sep 2016 14:57:52 +0200</pubDate>
      
      <guid>http://pjklauser.github.io/protobuf-rpc-pro/guides/gettingstarted/</guid>
      <description>The example source package contains several runnable examples.
The examples use a simple PingPong service where a client can call &amp;ldquo;ping&amp;rdquo; on a server.
Client Code Firstly we declare who the client is and who the server is that we&amp;rsquo;re going to connect to. Note that the client does not actually bind to port 1234, it is just used as a &amp;ldquo;name&amp;rdquo;.
 PeerInfo client = new PeerInfo(&amp;quot;clientHostname&amp;quot;, 1234); PeerInfo server = new PeerInfo(&amp;quot;serverHostname&amp;quot;, 8080);  The main client class to start with is a DuplexTcpClientPipelineFactory which works together with Netty Bootsrap to construct client channels.</description>
    </item>
    
    <item>
      <title>Maven Dependency</title>
      <link>http://pjklauser.github.io/protobuf-rpc-pro/dependencies/mavendependency/</link>
      <pubDate>Sun, 18 Sep 2016 14:57:52 +0200</pubDate>
      
      <guid>http://pjklauser.github.io/protobuf-rpc-pro/dependencies/mavendependency/</guid>
      <description>protobuf-rpc-pro is available via the maven central repository http://repo1.maven.org/maven2. The demo examples are available under the artifactId &amp;ldquo;protocol-rpc-pro-demo&amp;rdquo;.
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.googlecode.protobuf-rpc-pro&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;protobuf-rpc-pro-duplex&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.3.4&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt; &amp;lt;/dependency&amp;gt;  </description>
    </item>
    
    <item>
      <title>Performance Tips</title>
      <link>http://pjklauser.github.io/protobuf-rpc-pro/guides/performancetips/</link>
      <pubDate>Sun, 18 Sep 2016 14:57:52 +0200</pubDate>
      
      <guid>http://pjklauser.github.io/protobuf-rpc-pro/guides/performancetips/</guid>
      <description>Netty Since protobuf-rpc-pro uses Netty to provide the io over TCP, optimization of Netty will help increase performance. Here is a good article giving ideas how to squeeze the most out of Netty. http://gleamynode.net/articles/2232/
JVM options -server -Xms2048m -Xmx2048m -XX:+UseParallelGC -XX:+AggressiveOpts -XX:+UseFastAccessorMethods
Using the JVM options described increased throughput by 15% under certain conditions*.
protobuf-rpc-pro configuration If you do not call a client RPC method from within the processing of a server side RPC call then configure your server side DuplexTcpServerBootstrap with a SameThreadExecutor.</description>
    </item>
    
    <item>
      <title>RPC Timeout</title>
      <link>http://pjklauser.github.io/protobuf-rpc-pro/internals/rpctimeout/</link>
      <pubDate>Sun, 18 Sep 2016 14:57:52 +0200</pubDate>
      
      <guid>http://pjklauser.github.io/protobuf-rpc-pro/internals/rpctimeout/</guid>
      <description>The RPC timeout feature allows a client to specify a time in milliseconds for the maximum allowed duration of a RPC call ( irrespective of whether the call is called using a blocking or non blocking method ).
 final ClientRpcController controller = channel.newRpcController(); controller.setTimeoutMs(1000);  To enable monitoring of RpcServer side timeouts and RpcClient non blocking timeouts, it is necessary to register a RpcTimeoutChecker with the respective Bootstrap. The frequency of timeout checking and sizing of thread pool executors is configurable.</description>
    </item>
    
    <item>
      <title>Runtime Dependencies</title>
      <link>http://pjklauser.github.io/protobuf-rpc-pro/dependencies/runtimedependencies/</link>
      <pubDate>Sun, 18 Sep 2016 14:57:52 +0200</pubDate>
      
      <guid>http://pjklauser.github.io/protobuf-rpc-pro/dependencies/runtimedependencies/</guid>
      <description>The external dependencies have been kept to a minimum. Netty, slf4j and protobuf-java are the only compile time dependencies. Compiled against java 1.7. The dependencies can be seen in the project&amp;rsquo;s maven pom.xml.
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.protobuf&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;protobuf-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.netty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;netty&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.0.23.Final&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  </description>
    </item>
    
    <item>
      <title>SSL Guide</title>
      <link>http://pjklauser.github.io/protobuf-rpc-pro/guides/sslguide/</link>
      <pubDate>Sun, 18 Sep 2016 14:57:52 +0200</pubDate>
      
      <guid>http://pjklauser.github.io/protobuf-rpc-pro/guides/sslguide/</guid>
      <description>This guide explains how to setup keystores and certificate truststores in order to secure TCP communications between RPC client and server. The code required to secure communications is trivial and shown below for both client and server. The effort or price for the additional security is the effort and maintenance involved in managing the &amp;ldquo;trusted material&amp;rdquo; ie. keys, certificates and keystores.
Client Code The client must initialize a RpcSSLContext and register this with the bootstrap prior to peering with the server.</description>
    </item>
    
    <item>
      <title>SpringFramework</title>
      <link>http://pjklauser.github.io/protobuf-rpc-pro/guides/springconfigguide/</link>
      <pubDate>Sun, 18 Sep 2016 14:57:52 +0200</pubDate>
      
      <guid>http://pjklauser.github.io/protobuf-rpc-pro/guides/springconfigguide/</guid>
      <description>Thanks to Dieter Mayrhofer for contributing this example code. It shows one way to configure a server side implementation using spring. The code and runner is checked into the ( demo package ). The example starts a DefaultPingPongServerImpl service which is provided as standalone example.
Dependency on Spring Introduce the following maven dependencies to spring.
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.5.RELEASE&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.5.RELEASE&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt;  Server Spring Component The main spring component uses PostConstruct and PreDestroy annotations to startup and tear down the component cleanly.</description>
    </item>
    
    <item>
      <title>protobuf-rpc-pro</title>
      <link>http://pjklauser.github.io/protobuf-rpc-pro/</link>
      <pubDate>Sun, 18 Sep 2016 00:00:00 +0100</pubDate>
      
      <guid>http://pjklauser.github.io/protobuf-rpc-pro/</guid>
      <description>This project provides an java implementation for Google&amp;rsquo;s Protocol Buffer RPC services. The implementation builds upon Netty for low-level NIO.
Features TCP connection re-use RPC calls from an RPC client can be multiplexed over a single TCP socket to an RPC server. The RPC client has full control of the TCP socket, which is kept open between calls. This avoids the extra overhead of TCP connection establishment for each call ( SYN, SSL handshake ).</description>
    </item>
    
  </channel>
</rss>