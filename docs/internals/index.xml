<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Internals on protobuf-rpc-pro</title>
    <link>http://pjklauser.github.io/protobuf-rpc-pro/internals/</link>
    <description>Recent content in Internals on protobuf-rpc-pro</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the Apache License 2.0</copyright>
    <lastBuildDate>Sun, 18 Sep 2016 14:57:52 +0200</lastBuildDate>
    
	<atom:link href="http://pjklauser.github.io/protobuf-rpc-pro/internals/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Architecture</title>
      <link>http://pjklauser.github.io/protobuf-rpc-pro/internals/componentarchitecture/</link>
      <pubDate>Sun, 18 Sep 2016 14:57:52 +0200</pubDate>
      
      <guid>http://pjklauser.github.io/protobuf-rpc-pro/internals/componentarchitecture/</guid>
      <description>The protobuf-rpc-pro libraries primary function is to enable fully duplex RPC calls multiplexed over a single TCP/IP socket connection. Due to this duplex nature, the component architecture is almost symetric on client and server sides. The picture below shows the libraries internal architecture.
 DuplexTcpClient/ServerBootstraps - These are the factories for client and server connections.  PeerInfo - The identity of the client and server respectively, provided by hostname and port which is bound.</description>
    </item>
    
    <item>
      <title>RPC Timeout</title>
      <link>http://pjklauser.github.io/protobuf-rpc-pro/internals/rpctimeout/</link>
      <pubDate>Sun, 18 Sep 2016 14:57:52 +0200</pubDate>
      
      <guid>http://pjklauser.github.io/protobuf-rpc-pro/internals/rpctimeout/</guid>
      <description>The RPC timeout feature allows a client to specify a time in milliseconds for the maximum allowed duration of a RPC call ( irrespective of whether the call is called using a blocking or non blocking method ).
 final ClientRpcController controller = channel.newRpcController(); controller.setTimeoutMs(1000);  To enable monitoring of RpcServer side timeouts and RpcClient non blocking timeouts, it is necessary to register a RpcTimeoutChecker with the respective Bootstrap. The frequency of timeout checking and sizing of thread pool executors is configurable.</description>
    </item>
    
  </channel>
</rss>